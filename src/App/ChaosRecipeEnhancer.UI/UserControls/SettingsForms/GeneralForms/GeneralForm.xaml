<UserControl x:Class="ChaosRecipeEnhancer.UI.UserControls.SettingsForms.GeneralForms.GeneralForm"
             x:ClassModifier="public"
             xmlns:generalForms="clr-namespace:ChaosRecipeEnhancer.UI.UserControls.SettingsForms.GeneralForms"
             xmlns:creConstants="clr-namespace:ChaosRecipeEnhancer.UI.Constants"
             xmlns:creEnums="clr-namespace:ChaosRecipeEnhancer.UI.Models.Enums"
             xmlns:creConverters="clr-namespace:ChaosRecipeEnhancer.UI.Converters"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             Background="#202020"
             Loaded="OnLoaded"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=generalForms:GeneralFormViewModel}">

    <UserControl.Resources>
        <creConverters:BoolVisibilityConverter x:Key="BoolVisibilityConverter" CollapseWhenNotVisible="True" />
        <creConverters:BoolVisibilityConverter x:Key="InvertedBoolVisibilityConverter" CollapseWhenNotVisible="True" Invert="True" />
        <creConverters:EqualityToVisibilityConverter x:Key="VisibleIfEqual" ComparisonType="{x:Type system:Int32}" />
        <creConverters:InvertBoolConverter x:Key="InvertBoolConverter" />
        <creConverters:NullOrEmptyToBoolConverter x:Key="NullOrEmptyToBoolConverter" />
        <creConverters:EnumBooleanConverter x:Key="EnumBooleanConverter" />
        <creConverters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverter" />
    </UserControl.Resources>

    <Grid
        Margin="10"
        ShowGridLines="False">

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <TextBlock
            Grid.Column="0"
            Grid.Row="0"
            Grid.ColumnSpan="2"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="General"
            FontSize="24" />

        <!-- League Selection Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="1"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="League:"
            ToolTipService.InitialShowDelay="50"
            ToolTip="The league you are playing in." />

        <Grid
            Grid.Column="1"
            Grid.Row="1"
            Margin="10 0 0 10">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <ComboBox
                Grid.Column="0"
                Grid.Row="0"
                Grid.ColumnSpan="3"
                Width="160"
                Margin="0 0 5 0"
                VerticalContentAlignment="Center"
                IsSynchronizedWithCurrentItem="True"
                ItemsSource="{Binding LeagueList, Mode=OneWay}"
                SelectedItem="{Binding LeagueName, Mode=TwoWay}" />

            <Button
                x:Name="RefreshLeaguesButton"
                Grid.Column="3"
                Grid.Row="0"
                Width="60"
                Margin="5 0 0 0"
                HorizontalContentAlignment="Center"
                Content="Refresh"
                Command="{Binding RefreshLeaguesCommand}" />

        </Grid>
        <!-- League Selection End -->

        <!-- Stash Tab Query Mode Selector Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="2"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Stash Tab Query Mode:"
            ToolTip="The stash tab fetching mode. Stash tabs will automatically be added." />

        <ComboBox
            Grid.Column="1"
            Grid.Row="2"
            Margin="10 0 0 10"
            MinWidth="200"
            VerticalContentAlignment="Center"
            SelectedIndex="{Binding StashTabQueryMode, Mode=TwoWay}">

            <ComboBoxItem Content="Select Tabs From List" />
            <ComboBoxItem Content="Tab Name Prefix" />

        </ComboBox>
        <!-- Stash Tab Query Mode Selector Start -->

        <!-- Select Tab From List Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="3"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Select Stash Tabs:"
            Visibility="{Binding StashTabQueryMode, Converter={StaticResource VisibleIfEqual}, ConverterParameter=0}"/>

        <Grid
            Grid.Column="1"
            Grid.Row="3"
            Margin="10 0 0 10"
            Visibility="{Binding StashTabQueryMode, Converter={StaticResource VisibleIfEqual}, ConverterParameter=0}">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <xctk:CheckComboBox
                Grid.Column="0"
                Grid.Row="0"
                Grid.ColumnSpan="3"
                Margin="0 0 5 0"
                Width="160"
                IsSelectAllActive="True"
                SelectAllContent="Select All / Clear All"
                MaxDropDownHeight="300"
                ItemSelectionChanged="OnStashTabSelectionChanged"
                SelectedItemsOverride="{Binding Path=SelectedStashTabs, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                ItemsSource="{Binding StashTabIndexNameFullList}"
                ValueMemberPath="Index"
                VerticalContentAlignment="Center"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">

                <xctk:CheckComboBox.Resources>
                    <Style TargetType="{x:Type CheckBox}">
                        <Setter Property="Background" Value="White" />
                    </Style>
                    <Style TargetType="{x:Type xctk:SelectAllSelectorItem}">
                        <Setter Property="Background" Value="#202020" />
                    </Style>
                </xctk:CheckComboBox.Resources>

                <xctk:CheckComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding}" Foreground="#202020" />
                    </DataTemplate>
                </xctk:CheckComboBox.ItemTemplate>

            </xctk:CheckComboBox>

            <Button
                x:Name="FetchStashTabsButton"
                Grid.Column="3"
                Grid.Row="0"
                Width="60"
                Margin="5 0 0 0"
                Content="Fetch"
                IsEnabled="{Binding FetchingStashTabs, Converter={StaticResource InvertBoolConverter}}"
                Command="{Binding FetchStashTabsCommand}" />

        </Grid>

        <!-- Select Tab From List End -->

        <!-- Individual Stash Tab Name Prefix Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="3"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Stash Tab Prefix:"
            ToolTip="Every stash tab which name starts with this prefix will be added."
            Visibility="{Binding StashTabQueryMode, Converter={StaticResource VisibleIfEqual}, ConverterParameter=1}" />

        <TextBox
            Grid.Column="1"
            Grid.Row="3"
            Margin="10 0 0 10"
            Visibility="{Binding StashTabQueryMode, Converter={StaticResource VisibleIfEqual}, ConverterParameter=1}"
            Text="{Binding StashTabPrefix, Mode=TwoWay}" />
        <!-- Individual Stash Tab Name Prefix End -->

        <!-- Fetch on New Map Setting Start -->
        <!-- TODO: [Refactor] Enforce reload when this setting is changed (or at the very least, notify users it's required) -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="4"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Fetch on New Map:"
            ToolTip="Automatically fetches when you join a new Zone (Hideout excluded). REOPEN the overlay to take effect." />

        <CheckBox
            Grid.Column="1"
            Grid.Row="4"
            Margin="10 0 0 10"
            VerticalAlignment="Center"
            IsChecked="{Binding AutoFetchOnRezoneEnabled, Mode=TwoWay}" />
        <!-- Fetch on New Map Setting End -->

        <!-- Client Log File Location Setting (Row 13) Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="5"
            VerticalAlignment="Center"
            Text="PoE Client.txt Path:"
            Visibility="{Binding AutoFetchOnRezoneEnabled, Converter={StaticResource BoolVisibilityConverter}}" />

        <StackPanel
            Grid.Column="1"
            Grid.Row="5"
            Margin="10 0 0 0"
            Visibility="{Binding AutoFetchOnRezoneEnabled, Converter={StaticResource BoolVisibilityConverter}}">

            <RadioButton Content="Default Standalone Install Location"
                         IsChecked="{Binding Path=ClientLogFileLocationMode, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static creEnums:ClientLogFileLocationMode.DefaultStandaloneLocation}}"
                         Margin="0 0 0 5">
                <RadioButton.ToolTip>
                    <ToolTip>
                        <TextBlock>
                            <TextBlock.Text>
                                <MultiBinding StringFormat="Select this if you have installed PoE with all the default settings via Standalone Installer.&#x0a;&#x0a;Default Standalone Path:&#x0a;{0}">
                                    <Binding Source="{x:Static creConstants:PoEClient.DefaultStandaloneInstallLocationPath}" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </ToolTip>
                </RadioButton.ToolTip>
            </RadioButton>

            <RadioButton Content="Default Steam Install Location"
                         IsChecked="{Binding Path=ClientLogFileLocationMode, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static creEnums:ClientLogFileLocationMode.DefaultSteamLocation}}"
                         Margin="0 0 0 5">
                <RadioButton.ToolTip>
                    <ToolTip>
                        <TextBlock>
                            <TextBlock.Text>
                                <MultiBinding StringFormat="Select this if you have installed PoE with all the default settings via Steam.&#x0a;&#x0a;Default Steam Path:&#x0a;{0}">
                                    <Binding Source="{x:Static creConstants:PoEClient.DefaultSteamInstallLocationPath}" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </ToolTip>
                </RadioButton.ToolTip>
            </RadioButton>

            <RadioButton
                Content="Custom Install Location"
                IsChecked="{Binding Path=ClientLogFileLocationMode, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static creEnums:ClientLogFileLocationMode.CustomLocation}}"
                Margin="0 0 0 5">
                <RadioButton.ToolTip>
                    <ToolTip>
                        Select this if you have installed Path of Exile in a custom location.
                    </ToolTip>
                </RadioButton.ToolTip>
            </RadioButton>

            <Button
                x:Name="LogLocationDialog"
                Margin="0 0 0 10"
                MaxWidth="230"
                Command="{Binding SelectLogFileCommand}"
                Content="{Binding PathOfExileClientLogLocation, Mode=TwoWay}"
                HorizontalContentAlignment="Left"
                IsEnabled="{Binding Path=ClientLogFileLocationMode, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static creEnums:ClientLogFileLocationMode.CustomLocation}}"
                ToolTip="{Binding PathOfExileClientLogLocation, Mode=TwoWay}"
                ToolTipService.InitialShowDelay="50"
                ToolTipService.IsEnabled="{Binding PathOfExileClientLogLocation, Converter={StaticResource NullOrEmptyToBoolConverter}}"
                Visibility="{Binding Path=ClientLogFileLocationMode, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static creEnums:ClientLogFileLocationMode.CustomLocation}}" />

        </StackPanel>
        <!-- Client Log File Location Setting (Row 13) End -->

    </Grid>
</UserControl>